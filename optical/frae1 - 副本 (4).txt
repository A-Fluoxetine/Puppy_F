import cv2
import numpy as np

# 锟斤拷始锟斤拷锟斤拷锟斤拷头
cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # 预锟斤拷锟斤拷锟斤拷锟斤拷强锟斤拷锟斤拷锟斤拷应锟皆ｏ拷
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (7, 7), 0)
    thresh = cv2.adaptiveThreshold(
        blurred, 255,
        cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
        cv2.THRESH_BINARY_INV, 21, 5
    )
    
    # 锟斤拷态学锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷隙锟斤拷
    kernel = np.ones((5,5), np.uint8)
    processed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)

    # 锟斤拷锟斤拷锟斤拷锟?    contours, _ = cv2.findContours(processed, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area < 1000:  # 锟斤拷锟斤拷实锟斤拷锟斤拷锟斤拷锟叫★拷锟斤拷锟?            continue

        # 锟斤拷锟斤拷谓锟斤拷疲锟斤拷锟斤拷炔锟斤拷锟斤拷锟斤拷锟轿拷艹锟斤拷锟?%锟斤拷
        perimeter = cv2.arcLength(cnt, True)
        approx = cv2.approxPolyDP(cnt, 0.03 * perimeter, True)
        vertices = len(approx)

        # --------- 锟斤拷锟斤拷识锟斤拷 ---------
        if vertices == 4 and cv2.isContourConvex(approx):
            # 锟斤拷锟斤拷锟斤拷小锟斤拷泳锟斤拷谓嵌龋锟斤拷锟斤拷锟斤拷锟叫憋拷锟斤拷牛锟?            rect = cv2.minAreaRect(cnt)
            _, _, angle = rect
            if abs(angle) > 45:  # 锟脚筹拷锟接斤拷45锟饺碉拷锟斤拷锟斤拷锟斤拷锟斤拷
                continue
            
            shape = "RECT"
            box = cv2.boxPoints(rect)
            box = np.int0(box)
            cv2.drawContours(frame, [box], 0, (0,255,0), 2)

        # --------- 圆锟斤拷识锟斤拷 ---------
        else:
            # 使锟斤拷锟杰筹拷锟斤拷锟斤拷圆锟轿度ｏ拷4锟斤拷*Area/Perimeter2锟斤拷
            circularity = 4 * np.pi * area / (perimeter**2 + 1e-5)
            if circularity > 0.85:  # 值越锟接斤拷1越锟接斤拷锟斤拷锟斤拷圆锟斤拷
                (x, y), radius = cv2.minEnclosingCircle(cnt)
                center = (int(x), int(y))
                radius = int(radius)
                cv2.circle(frame, center, radius, (255,0,0), 2)
                shape = "CIRCLE"
            else:
                continue  # 锟斤拷锟斤拷锟睫凤拷锟斤拷锟斤拷锟斤拷锟阶?
        # 锟斤拷注锟侥憋拷
        M = cv2.moments(cnt)
        if M["m00"] != 0:
            cX = int(M["m10"] / M["m00"])
            cY = int(M["m01"] / M["m00"])
            cv2.putText(frame, shape, (cX-30, cY), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0,0,255), 2)

    cv2.imshow('Shape Detection', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()